{
  "info": {
    "_postman_id": "26346259-ffca8366-2177-4ad7-9b09-37ece581656e",
    "name": "Test Explore With Me - Feature Comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Добавление нового пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200, 201] и данные в формате json.\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "    pm.response.to.be.json;\r",
              "});",
              "pm.test(\"Пользователь должен содержать поля: id, email, name.\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(61);",
              "    pm.expect(jsonData.email, '\"email\" field').to.eql('user@test.com');",
              "    pm.expect(jsonData.name, '\"name\" field').to.eql('userName');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"userName\",\n    \"email\": \"user@test.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление новой категории",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200, 201] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Категория должна содержать поля: id, name.\", function () {\r",
              "    const jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(53);\r",
              "    pm.expect(jsonData.name, '\"name\" field').to.eql('Tayler');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"Tayler\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [201] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Событие должно содержать поля: id, annotation, description, state.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(35);\r",
              "    pm.expect(jsonData.annotation, '\"annotation\" field').to.eql('Dog Tayler');\r",
              "    pm.expect(jsonData.description, '\"description\" field').to.eql('just a dog');\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text",
            "disabled": true
          },
          {
            "key": "",
            "value": "Accept",
            "type": "text",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\": \"Dog Tayler\",\r\n    \"category\": 1,\r\n    \"description\": \"just a dog\",\r\n    \"eventDate\": \"2023-07-14 00:00:00\",\r\n    \"location\": {\r\n        \"lat\": 55.754167,\r\n        \"lon\": 37.62\r\n    }, \r\n    \"paid\": false,\r\n    \"participantLimit\": 50,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Husky\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к событию с ошибкой",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код ошибки [409].\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Add comment from user1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "61"
            },
            {
              "key": "eventId",
              "value": "35"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение описания события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Событие должно содержать поля: id, annotation, description, state.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(35);\r",
              "    pm.expect(jsonData.annotation, '\"annotation\" field').to.eql('Dog Tayler');\r",
              "    pm.expect(jsonData.description, '\"description\" field').to.eql('just a dog');\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql('PUBLISHED');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\": \"Dog Tayler\",\r\n    \"category\": 1,\r\n    \"description\": \"just a dog\",\r\n    \"eventDate\": \"2023-07-14 00:00:00\",\r\n    \"location\": {\r\n        \"lat\": 55.754167,\r\n        \"lon\": 37.62\r\n    }, \r\n    \"paid\": false,\r\n    \"participantLimit\": 50,\r\n    \"requestModeration\": false,\r\n    \"stateAction\": \"PUBLISH_EVENT\",\r\n    \"title\": \"Husky\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "35"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового юзера 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200, 201] и данные в формате json.\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "    pm.response.to.be.json;\r",
              "});",
              "pm.test(\"Пользователь должен содержать поля: id, email, name.\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(62);",
              "    pm.expect(jsonData.email, '\"email\" field').to.eql('user2@test.com');",
              "    pm.expect(jsonData.name, '\"name\" field').to.eql('userName2');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"userName2\",\n    \"email\": \"user2@test.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к event1 от user1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [201] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, authorName, state, created.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    \r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
              "    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Add comment from user1\");\r",
              "    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql(\"userName\");\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql(\"PENDING\");\r",
              "    pm.expect(jsonData.created, '\"created\" field').not.null;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Add comment from user1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "61"
            },
            {
              "key": "eventId",
              "value": "35"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к event1 от user2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [201] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, authorName, state, created.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    \r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
              "    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Add comment from user2\");\r",
              "    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql(\"userName2\");\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql(\"PENDING\");\r",
              "    pm.expect(jsonData.created, '\"created\" field').not.null;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Add comment from user2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "62"
            },
            {
              "key": "eventId",
              "value": "35"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение comment1 администратором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, authorName, state.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
              "    pm.expect(jsonData.text, '\"text\" field').to.eql('Add comment from user1');\r",
              "    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql('userName');\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql('PUBLISHED');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId?approved=true",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "query": [
            {
              "key": "approved",
              "value": "true"
            }
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментариев от администратора",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен иметь поля: id, text, authorName, state.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'items count in total').to.eql(2);\r",
              "\r",
              "    pm.expect(jsonData[1].id, 'result[0]: \"id\" field').to.eql(1);\r",
              "    pm.expect(jsonData[1].text, 'result[0]: \"text\" field').to.eql(\"Add comment from user1\");\r",
              "    pm.expect(jsonData[1].authorName, 'result[0]: \"authorName\" field').to.eql('userName');\r",
              "    pm.expect(jsonData[1].state, 'result[0]: \"state\" field').to.eql('PUBLISHED');\r",
              "\r",
              "    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(2);\r",
              "    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql(\"Add comment from user2\");\r",
              "    pm.expect(jsonData[0].authorName, 'result[0]: \"authorName\" field').to.eql('userName2');\r",
              "    pm.expect(jsonData[0].state, 'result[0]: \"state\" field').to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?text=comment",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "text",
              "value": "comment"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение comment2 администратором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, authorName, state.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
              "    pm.expect(jsonData.text, '\"text\" field').to.eql('Add comment from user2');\r",
              "    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql('userName2');\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql('PUBLISHED');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId?approved=true",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "query": [
            {
              "key": "approved",
              "value": "true"
            }
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение comment1 от user1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, authorName, state, created.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
              "\r",
              "    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Update comment from user1\");\r",
              "    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql(\"userName\");\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql(\"PUBLISHED\");\r",
              "    pm.expect(jsonData.created, '\"created\" field').not.null;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Update comment from user1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "61"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментариев события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен содержать поля: id, authorName, state.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'items count in total').to.eql(2);\r",
              "\r",
              "    pm.expect(jsonData[1].id, 'result[0]: \"id\" field').to.eql(1);\r",
              "    pm.expect(jsonData[1].authorName, 'result[0]: \"authorName\" field').to.eql('userName');\r",
              "    pm.expect(jsonData[1].state, 'result[0]: \"state\" field').to.eql('PUBLISHED');\r",
              "\r",
              "    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(2);\r",
              "    pm.expect(jsonData[0].authorName, 'result[0]: \"authorName\" field').to.eql('userName2');\r",
              "    pm.expect(jsonData[0].state, 'result[0]: \"state\" field').to.eql('PUBLISHED');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/:id/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":id",
            "comments"
          ],
          "variable": [
            {
              "key": "id",
              "value": "35"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [204].\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "61"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение не существующего комментария от польхователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [404].\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "61"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментария пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса [200] и данные в формате json.\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, authorName, state, created.\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
              "    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Add comment from user2\");\r",
              "    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql(\"userName2\");\r",
              "    pm.expect(jsonData.state, '\"state\" field').to.eql(\"PUBLISHED\");\r",
              "    pm.expect(jsonData.created, '\"created\" field').not.null;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "62"
            },
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}